package main

import (
	"log"
	"regexp"
	"strings"
)

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Å–ø–∞–º, —Å–∫–∞–º –∏ —Ä–µ–∫–ª–∞–º—É
func (b *Bot) isSpam(text string) bool {
	// –ü—Ä–∏–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–≥–æ –ø–æ–∏—Å–∫–∞
	lowerText := strings.ToLower(text)

	// –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
	patternDefinitions := map[string]string{
		// –°—Å—ã–ª–∫–∏ –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã
		`(http|https|ftp|www\.|t\.me|telegram\.me|\+\d{7,}|\d{10,})`: "—Å—Å—ã–ª–∫–∏ –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã",
		//`[@#][a-z0-9_]{4,}`: "–¥–ª–∏–Ω–Ω—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ —Ö—ç—à—Ç–µ–≥–∏",

		// –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Å–ø–∞–º –∏ —Å–∫–∞–º
		`(?i)(–∫—Ä–∏–ø—Ç–æ|–±–∏—Ç–∫–æ–∏–Ω|—ç—Ñ–∏—Ä–∏—É–º|–±–ª–æ–∫—á–µ–π–Ω|nft|–∏–Ω–≤–µ—Å—Ç|—Ç—Ä–∞—Å—Ç|forex|—Ñ–æ—Ä–µ–∫—Å|—Ç—Ä–µ–π–¥)`: "—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Å–ø–∞–º",
		`(?i)(–∑–∞—Ä–∞–±–æ—Ç–æ–∫|–¥–æ—Ö–æ–¥|–ø—Ä–∏–±—ã–ª—å|–ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥|—Ö–∞–ª—è–≤–∞|–±–æ–≥–∞—Ç—Å—Ç–≤–æ)`:            "–∑–∞—Ä–∞–±–æ—Ç–æ–∫ –∏ –¥–æ—Ö–æ–¥",
		`(?i)(–±—Ä–æ–∫–µ—Ä|—Ç—Ä–µ–π–¥–∏–Ω–≥|–¥–∏–≤–∏–¥–µ–Ω—Ç|–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç|–∫–æ–∏–Ω|—Ç–æ–∫–µ–Ω)`:                     "—Ç—Ä–µ–π–¥–∏–Ω–≥ –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏",

		// –†–µ–∫–ª–∞–º–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
		`(?i)(–±–µ—Å–ø–ª–∞—Ç–Ω–æ|–∞–∫—Ü–∏—è|—Å–∫–∏–¥–∫–∞|—Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∞|–ø—Ä–æ–º–æ–∫–æ–¥|–∫—É–ø–æ–Ω|–≤—ã–∏–≥—Ä–∞–π|–ø—Ä–∏–∑|—Ä–æ–∑—ã–≥—Ä—ã—à)`:        "—Ä–µ–∫–ª–∞–º–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è",
		`(?i)(–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è|—Ç–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è|—É—Å–ø–µ–π|–ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å|—É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)`: "–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è",
		`(?i)(–∑–∞–∫–∞–∂–∏|–∫—É–ø–∏|–ø—Ä–æ–¥–∞–º|–ø–æ–∫—É–ø–∞–π|–ø—Ä–æ–¥–∞–π—Ç–µ|–ø–æ–∫—É–ø–∫–∞|–ø—Ä–æ–¥–∞–∂–∞|–º–∞–≥–∞–∑–∏–Ω|–∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω)`:  "—Ç–æ—Ä–≥–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è",

		// –°–æ–º–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
		`(?i)(—Å–∫–∞–º|–º–æ—à–µ–Ω–Ω–∏–∫|–æ–±–º–∞–Ω|—Ä–∞–∑–≤–æ–¥|–ª–æ—Ö–æ—Ç—Ä–æ–Ω|–Ω–∞–¥—É–≤–∞—Ç–µ–ª—å—Å—Ç–≤–æ|—Ñ–∏—à–∏–Ω–≥)`: "–ø—Ä—è–º—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–∫–∞–º–∞",
		`(?i)(–≥–∞—Ä–∞–Ω—Ç|–≥–∞—Ä–∞–Ω—Ç–∏—è|–±–µ–∑ —Ä–∏—Å–∫–∞|—Å—Ç–æ–ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ|–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ)`:          "—Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥–∞—Ä–∞–Ω—Ç–∏–∏",

		// Adult –∏ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
		`(?i)(–ø–æ—Ä–Ω–æ|xxx|—Å–µ–∫—Å|–∏–Ω—Ç–∏–º|–∑–Ω–∞–∫–æ–º—Å—Ç–≤|–≤—Å—Ç—Ä–µ—á|–¥–µ–≤—É—à–∫[–∏–∞]|–ø–∞—Ä–Ω[–∏–µ]|love|casino|–∫–∞–∑–∏–Ω–æ|—Å—Ç–∞–≤–∫[–∏–∞])`: "–∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç",

		// –°–ø–∞–º-—Ç–µ—Ö–Ω–∏–∫–∏
		//`[!?]{5,}`:   "–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞–∫–∏",
		`\p{Lu}{5,}`: "–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã",
		`\d{10,}`:    "–¥–ª–∏–Ω–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
		`\S{20,}`:    "–æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤",
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º
	for pattern, description := range patternDefinitions {
		if matched, _ := regexp.MatchString(pattern, text); matched {
			log.Printf("üö® –°–ü–ê–ú: '%s' (%s) –≤ —Ç–µ–∫—Å—Ç–µ: %s", description, pattern, text)
			return true
		}
	}

	// // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
	// if b.containsExcessiveEmoji(lowerText) {
	// 	log.Printf("üö® –°–ü–ê–ú: –∏–∑–±—ã—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–º–æ–¥–∑–∏ –≤ —Ç–µ–∫—Å—Ç–µ: %s", text)
	// 	return true
	// }

	if b.hasSuspiciousWordCombinations(lowerText) {
		log.Printf("üö® –°–ü–ê–ú: –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è —Å–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ: %s", text)
		return true
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ URL
	if b.containsSuspiciousURL(text) {
		log.Printf("üö® –°–ü–ê–ú: –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π URL –≤ —Ç–µ–∫—Å—Ç–µ: %s", text)
		return true
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å –∏—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π)
	// if b.isRepeatedMessage(text) {
	// 	log.Printf("üö® –°–ü–ê–ú-–¥–µ—Ç–µ–∫—Ç: –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ: %s", text)
	// 	return true
	// }

	return false
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–∑–±—ã—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–º–æ–¥–∑–∏
func (b *Bot) containsExcessiveEmoji(text string) bool {
	emojiPattern := `[\x{1F600}-\x{1F64F}\x{1F300}-\x{1F5FF}\x{1F680}-\x{1F6FF}\x{1F700}-\x{1F77F}\x{1F780}-\x{1F7FF}\x{1F800}-\x{1F8FF}\x{1F900}-\x{1F9FF}\x{1FA00}-\x{1FA6F}\x{1FA70}-\x{1FAFF}\x{2600}-\x{26FF}\x{2700}-\x{27BF}]`

	emojiCount := len(regexp.MustCompile(emojiPattern).FindAllString(text, -1))
	textLength := len([]rune(text))

	// –ï—Å–ª–∏ –±–æ–ª–µ–µ 30% —Ç–µ–∫—Å—Ç–∞ - —ç–º–æ–¥–∑–∏, —Å—á–∏—Ç–∞–µ–º —Å–ø–∞–º–æ–º
	if textLength > 0 && float64(emojiCount)/float64(textLength) > 0.3 {
		return true
	}

	return false
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π —Å–ª–æ–≤
func (b *Bot) hasSuspiciousWordCombinations(text string) bool {
	suspiciousCombinations := map[string]string{
		"–±—ã—Å—Ç—Ä–æ –¥–µ–Ω—å–≥–∏":        "–±—ã—Å—Ç—Ä—ã–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫",
		"–ª–µ–≥–∫–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫":     "–ª–µ–≥–∫–∏–µ –¥–µ–Ω—å–≥–∏",
		"—Ä–∞–±–æ—Ç–∞ –¥–æ–º–∞":          "—Ä–∞–±–æ—Ç–∞ –Ω–∞ –¥–æ–º—É",
		"—É–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞":     "—É–¥–∞–ª–µ–Ω–∫–∞",
		"–∑–∞—Ä–∞–±–æ—Ç–æ–∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç":   "–æ–Ω–ª–∞–π–Ω –∑–∞—Ä–∞–±–æ—Ç–æ–∫",
		"–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≥–∞—Ä–∞–Ω—Ç–∏—è":  "–≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏",
		"–∫—Ä–∏–ø—Ç–æ –¥–æ—Ö–æ–¥":         "–¥–æ—Ö–æ–¥ –æ—Ç –∫—Ä–∏–ø—Ç–æ",
		"–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫":   "–±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏",
		"–≤—ã–∏–≥—Ä–∞–π iphone":       "–∫–æ–Ω–∫—É—Ä—Å—ã –∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏",
		"–∞–∫—Ü–∏—è —Ç–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è": "–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –∞–∫—Ü–∏–∏",
	}

	for combo, description := range suspiciousCombinations {
		if strings.Contains(text, combo) {
			log.Printf("üîç –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è: '%s' (%s)", combo, description)
			return true
		}
	}

	return false
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ URL
func (b *Bot) containsSuspiciousURL(text string) bool {
	urlPattern := `(http|https|ftp|www\.)\S+`
	urls := regexp.MustCompile(urlPattern).FindAllString(text, -1)

	suspiciousDomains := map[string]string{
		"bit.ly":     "—É–∫–æ—Ä–æ—á–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞",
		"goo.gl":     "—É–∫–æ—Ä–æ—á–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞",
		"tinyurl":    "—É–∫–æ—Ä–æ—á–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞",
		"shorte.st":  "—É–∫–æ—Ä–æ—á–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞",
		"adf.ly":     "—Ä–µ–∫–ª–∞–º–Ω–∞—è —Å—Å—ã–ª–∫–∞",
		"profit":     "—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –¥–æ–º–µ–Ω",
		"earn":       "–∑–∞—Ä–∞–±–æ—Ç–æ–∫",
		"money":      "–¥–µ–Ω—å–≥–∏",
		"crypto":     "–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã",
		"investment": "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏",
		"casino":     "–∞–∑–∞—Ä—Ç–Ω—ã–µ –∏–≥—Ä—ã",
		"gambling":   "–≥–µ–º–±–ª–∏–Ω–≥",
	}

	for _, url := range urls {
		for domain, reason := range suspiciousDomains {
			if strings.Contains(strings.ToLower(url), domain) {
				log.Printf("üîó –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π URL: %s (%s: %s)", url, domain, reason)
				return true
			}
		}
	}

	return false
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏)
// func (b *Bot) isRepeatedMessage(text string) bool {
// 	// –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
// 	// –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –º–Ω–æ–≥–æ —Ä–∞–∑
// 	return false
// }
