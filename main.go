//return -1001225930156, nil

package main

import (
	"database/sql"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"path/filepath"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	godotenv "github.com/joho/godotenv"
	_ "github.com/mattn/go-sqlite3"
	"gopkg.in/natefinch/lumberjack.v2"
)

const CHECK_HOURS = -20        // hours get DB messages
const AI_REQUEST_TIMEOUT = 300 // seconds for AI request
const LIMIT_MSG = 100          //–ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–ø—Ä–æ—â–µ–Ω–Ω—ã—Ö –¥–ª—è /summary

// Config —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞
type Config struct {
	TelegramToken        string
	LocalLLMUrl          string // URL –ª–æ–∫–∞–ª—å–Ω–æ–π LLM (–Ω–∞–ø—Ä–∏–º–µ—Ä "http://localhost:1234/v1/chat/completions")
	AiModelName          string
	AllowedGroups        []int64
	SummaryPrompt        string
	SystemPrompt         string
	AnekdotPrompt        string
	TopicPrompt          string
	ReplyPrompt          string
	HistoryDays          int                // –°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é
	DBPath               string             // –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É SQLite
	ContextMessageLimit  int                // —Ä–∞–∑–º–µ—Ä —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	ContextTimeLimit     int                // —Ä–∞–∑–º–µ—Ä –≤ —á–∞—Å–∞—Ö —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
	ContextRetentionDays int                //—É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–∑ –ë–î
	TokenCosts           map[string]float64 // —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π

}

// Bot —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
type Bot struct {
	config     Config
	tgBot      *tgbotapi.BotAPI
	httpClient *http.Client
	db         *sql.DB
	//chatHistories map[int64][]ChatMessage // –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —á–∞—Ç–∞–º
	lastSummary map[int64]time.Time // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–æ–¥–∫–∏ –ø–æ —á–∞—Ç–∞–º
}

// ChatMessage —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
// type ChatMessage struct {
// 	User string
// 	Text string
// 	Time time.Time
// }

// DB —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
type DBChat struct {
	ID       int64
	Title    string
	Type     string
	Username string
}

type DBUser struct {
	ID        int64
	Username  string
	FirstName string
	LastName  string
}

// DBMessage —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –ë–î
type DBMessage struct {
	ID            int
	ChatID        int64
	UserID        int64
	UserFirstName string
	UserLastName  string
	Text          string
	Timestamp     int64
	Username      string
	ChatTitle     string
}

// LocalLLMRequest —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π LLM
type LocalLLMRequest struct {
	Model       string            `json:"model"`
	Messages    []LocalLLMMessage `json:"messages"`
	Temperature float64           `json:"temperature,omitempty"`
	MaxTokens   int               `json:"max_tokens,omitempty"`
}

// LocalLLMMessage —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è LLM
type LocalLLMMessage struct {
	Role    string `json:"role"`
	Content string `json:"content"`
}

// LocalLLMResponse —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç LLM
type LocalLLMResponse struct {
	Choices []struct {
		Message struct {
			Content string `json:"content"`
		} `json:"message"`
	} `json:"choices"`
	Model string `json:"model"`
	Usage struct {
		CompletionTokens        int `json:"completion_tokens"`
		CompletionTokensDetails struct {
			AcceptedPredictionTokens int `json:"accepted_prediction_tokens"`
			AudioTokens              int `json:"audio_tokens"`
			ReasoningTokens          int `json:"reasoning_tokens"`
			RejectedPredictionTokens int `json:"rejected_prediction_tokens"`
		} `json:"completion_tokens_details"`
		PromptTokens        int `json:"prompt_tokens"`
		PromptTokensDetails struct {
			AudioTokens  int `json:"audio_tokens"`
			CachedTokens int `json:"cached_tokens"`
		} `json:"prompt_tokens_details"`
		TotalTokens int `json:"total_tokens"`
	} `json:"usage"`
}

// BillingRecord –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤ AI
type BillingRecord struct {
	UserID           int64
	ChatID           int64
	Timestamp        int64
	Model            string
	PromptTokens     int
	CompletionTokens int
	TotalTokens      int
	Cost             float64
}

// –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã)
var allowedAdmins = map[int64]bool{
	152657363: true, //@wrwfx
	233088195: true,
}

// –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —á–∞—Ç—ã (–≥—Ä—É–ø–ø—ã, —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã)
var allowedChats = map[int64]bool{
	-1002478281670: true, // –ê—Ç–∏–ø–∏—á–Ω—ã–π —á–∞—Ç
	-1002631108476: true, //AdminBot
	-1002407860030: true, //AdminBot2
}

func main() {
	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
	setupLogger()

	// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
	err := godotenv.Load()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env —Ñ–∞–π–ª–∞: %v (–ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è)", err)
	}

	// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	config := Config{
		TelegramToken:        getEnv("TELEGRAM_BOT_TOKEN", ""),
		LocalLLMUrl:          getEnv("AI_LOCAL_LLM_URL", "http://localhost:1234/v1/chat/completions"),
		AiModelName:          getEnv("AI_MODEL", ""),
		AllowedGroups:        []int64{},
		HistoryDays:          30, //DB save msg days
		ContextMessageLimit:  10,
		ContextTimeLimit:     4,
		ContextRetentionDays: 7,
		DBPath:               getEnv("DB_PATH", "telegram_bot.db"),
		SummaryPrompt:        "Generate concise Russian summary of discussion. Highlight key topics. Format authors as name(@username). Use only these messages:\n%s\nReply in Russian. Sometimes mention the time hour of messages.",
		SystemPrompt:         "You're an AI assistant that creates concise Russian summaries of chat discussions. Identify main topics and essence. Always reply in Russian. Do not answer think.",
		AnekdotPrompt:        "Using these messages, create a short funny joke in Russian, loosely related to discussion. Format as one cohesive text. Don't use usernames:\n%s\nReply in Russian only.",
		TopicPrompt:          "Using these messages, create a short, funny discussion topic in Russian, loosely related to the previous conversation. Format it as one cohesive text. Add start topic question of disscussion. Do not use usernames:\n%s\nReply in Russian only.",
		ReplyPrompt:          "Create a short ansver for user question only answer if user ask it. Format it as one cohesive text. Do not use usernames:\n%s\nReply in if user ask Russian and reply another language if user ask.",
		TokenCosts: map[string]float64{
			"deepseek": 0.0001,
			"openai":   0.001,
		},
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
	if config.TelegramToken == "" {
		log.Fatal("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
	}

	fmt.Printf("config.TelegramToken: %v\n", config.TelegramToken)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
	bot, err := NewBot(config)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: %v", err)
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
	err = bot.initDB()
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: %v", err)
	}
	defer bot.db.Close()

	// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
	bot.Run()
}

func setupLogger() {
	logDir := "logs"
	if err := os.MkdirAll(logDir, 0755); err != nil {
		log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤: %v. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è.", err)
		logDir = "."
	}

	logFile := filepath.Join(logDir, "telegram_bot.log")

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ—Ç–∞—Ü–∏–∏ –ª–æ–≥–æ–≤
	lumberjackLogger := &lumberjack.Logger{
		Filename:   logFile,
		MaxSize:    10, // MB
		MaxBackups: 7,  // —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –¥–æ 7 —Ñ–∞–π–ª–æ–≤
		MaxAge:     7,  // —Ö—Ä–∞–Ω–∏—Ç—å –¥–æ 7 –¥–Ω–µ–π
		Compress:   true,
		LocalTime:  true,
	}

	// –ù–∞–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥ –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª –∏ –≤ stdout
	log.SetOutput(io.MultiWriter(os.Stdout, lumberjackLogger))

	log.Println("–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ.")
}

// getEnv –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
func getEnv(key, defaultValue string) string {
	value := os.Getenv(key)
	if value == "" {
		return defaultValue
	}
	return value
}

// NewBot —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
func NewBot(config Config) (*Bot, error) {
	tgBot, err := tgbotapi.NewBotAPI(config.TelegramToken)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Telegram –±–æ—Ç–∞: %v", err)
	}

	db, err := sql.Open("sqlite3", config.DBPath)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: %v", err)
	}

	return &Bot{
		config:     config,
		tgBot:      tgBot,
		httpClient: &http.Client{Timeout: AI_REQUEST_TIMEOUT * time.Second},
		db:         db,
		//chatHistories: make(map[int64][]ChatMessage),
		lastSummary: make(map[int64]time.Time),
	}, nil
}

// Run –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞
func (b *Bot) Run() {
	log.Printf("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ %s", b.tgBot.Self.UserName)
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	msg := tgbotapi.NewMessage(152657363, "ü§ñ –ë–æ—Ç "+b.tgBot.Self.UserName+" —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
	_, err := b.tgBot.Send(msg)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ:%v", err)
	}

	// –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := b.tgBot.GetUpdatesChan(u)

	// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ë–î
	go b.DeleteOldMessages()
	go b.cleanupOldContext()

	for update := range updates {
		if update.Message != nil {
			// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
			logMsg := fmt.Sprintf("[%s] ", getMessageType(update.Message))

			if update.Message.From != nil {
				logMsg += fmt.Sprintf("–û—Ç: @%s[%v] ", getUserName(update.Message.From), update.Message.From.ID)
			}

			if update.Message.Chat != nil {
				logMsg += fmt.Sprintf("–≤ %s(%d) ", getChatTitle(update.Message), update.Message.Chat.ID)
			}

			// –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–±–æ —Ç–µ–∫—Å—Ç, –ª–∏–±–æ –ø–æ–¥–ø–∏—Å—å, –ª–∏–±–æ –æ—Ç–º–µ—Ç–∫—É –æ –º–µ–¥–∏–∞
			switch {
			case update.Message.Text != "":
				text := update.Message.Text
				if len(text) > 50 {
					text = text[:50] + "..."
				}
				logMsg += fmt.Sprintf("- %q", text)
			case update.Message.Caption != "":
				caption := update.Message.Caption
				if len(caption) > 50 {
					caption = caption[:50] + "..."
				}
				logMsg += fmt.Sprintf("- [–ø–æ–¥–ø–∏—Å—å] %q", caption)
			default:
				logMsg += "- [–º–µ–¥–∏–∞]"
			}

			log.Println(logMsg)

			// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
			b.processMessage(update.Message)
		}
	}
}

// processMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func (b *Bot) processMessage(message *tgbotapi.Message) {
	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
	if message.IsCommand() {
		b.handleCommand(message)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫ –±–æ—Ç—É
	if b.isBotMentioned(message) {
		b.handleBotMention(message)
		return
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ reply-—Å–æ–æ–±—â–µ–Ω–∏–π
	if message.ReplyToMessage != nil {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ reply –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
		if message.ReplyToMessage.From != nil && message.ReplyToMessage.From.ID == b.tgBot.Self.ID {
			b.handleReplyToBot(message)
			return
		}
	}

	// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –≥—Ä—É–ø–ø
	if message.Chat.IsGroup() || message.Chat.IsSuperGroup() {
		b.storeMessage(message)
	}

}

// handleCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
func (b *Bot) handleCommand(message *tgbotapi.Message) {

	if !allowedChats[message.Chat.ID] {
		b.sendMessage(message.Chat.ID, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Ä–∞–±–æ—Ç–∞—é –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö
	// if message.From != nil && !allowedUsers[message.From.ID] {
	// 	b.sendMessage(message.Chat.ID, "–ù–µ —Ö–æ—á—É –≤—ã–ø–æ–ª–Ω—è—Ç—å –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É.")
	// 	return
	// }

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –±–æ—Ç –≤–∏–¥–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —ç—Ç–æ–º —á–∞—Ç–µ
	if message.Chat.IsGroup() || message.Chat.IsSuperGroup() {
		if !b.canBotReadMessages(message.Chat.ID) {
			b.sendMessage(message.Chat.ID, "–ú–Ω–µ –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.")
			return
		}
	}

	switch message.Command() {
	case "start":
		b.sendMessage(message.Chat.ID, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∞—Ç–∫–∏—Ö –ø–µ—Ä–µ—Å–∫–∞–∑–æ–≤ –æ–±—Å—É–∂–¥–µ–Ω–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π /summary –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏.")
	case "help":
		b.sendMessage(message.Chat.ID, b.getHelp())

	case "ping", "–ø–∏–Ω–≥":
		// –§–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
		commandReceiveTime := time.Now()

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç
		b.sendMessage(message.Chat.ID, "pong")

		// –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
		processingTime := time.Since(commandReceiveTime)

		// –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞
		messageTime := time.Unix(int64(message.Date), 0)
		timeDiff := time.Since(messageTime)

		// –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
		response := fmt.Sprintf(
			"üèì Pong!\n"+
				"‚è± –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: %d ms\n"+
				"üïí –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: %s\n"+
				"‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: %s",
			processingTime.Milliseconds(),
			time.Now().Format("02.01.2006 15:04:05 MST"),
			formatDuration(timeDiff),
		)

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
		b.sendMessage(message.Chat.ID, response)

	case "summary", "—Å–∞–º–º–∞—Ä–∏":
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 50)
		args := strings.Fields(message.CommandArguments())
		count := LIMIT_MSG // –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
		if len(args) > 0 {
			if num, err := strconv.Atoi(args[0]); err == nil && num > 0 {
				count = num
				// –û–≥—Ä–∞–Ω–∏—á–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
				if count > LIMIT_MSG {
					count = LIMIT_MSG
					b.sendMessage(message.Chat.ID, fmt.Sprintf("–Ø –ø–æ–º–Ω—é —Ç–æ–ª—å–∫–æ %d —Å–æ–æ–±—â–µ–Ω–∏–π...", LIMIT_MSG))
				}
			}
		}
		b.handleSummaryRequest(message, count)
	// case "summary_from":
	// 	b.handleSummaryFromRequest(message)
	case "stat", "stats":
		b.handleStatsRequest(message)
	case "aistat", "aistats":
		if allowedAdmins[message.From.ID] {
			b.handleGetTopAIUsers(message)
		}
	case "anekdot", "–∞–Ω–µ–∫–¥–æ—Ç":
		b.handleAnekdotRequest(message)
	case "tema", "topic":
		b.handleTopicRequest(message)
	case "clear", "–∑–∞–±—É–¥—å":
		b.DeleteUserContext(message.Chat.ID, message.From.ID)
	case "say", "—Å–∫–∞–∑–∞—Ç—å":
		// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞
		if allowedAdmins[message.From.ID] {
			text := message.CommandArguments()
			if text == "" {
				b.sendMessage(message.Chat.ID, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /say [—Ç–µ–∫—Å—Ç]")
				return
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
			b.sendMessage(message.Chat.ID, text)

			// –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
			deleteMsg := tgbotapi.NewDeleteMessage(message.Chat.ID, message.MessageID)
			_, err := b.tgBot.Request(deleteMsg)
			if err != nil {
				log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: %v", err)
			}
		} else {
			b.sendMessage(message.Chat.ID, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
		}
	default:
		b.sendMessage(message.Chat.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")
	}
}

// handleBotMention –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã–µ –±–æ—Ç—É
func (b *Bot) handleBotMention(message *tgbotapi.Message) {

	// –£–¥–∞–ª—è–µ–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞
	cleanText := b.removeBotMention(message.Text)
	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
	switch {
	case strings.Contains(strings.ToLower(cleanText), "–∑–∞–±—É–¥—å"):
		log.Println("–£–¥–∞–ª—è—é –∫–æ–Ω—Ç–µ–∫—Å—Ç")
		err := b.DeleteUserContext(message.Chat.ID, message.From.ID)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: %v", err)
			b.sendMessage(message.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç")
			return
		}
		b.sendMessage(message.Chat.ID, fmt.Sprintf("–í—Å–µ –∑–∞–±—ã–ª =) %s", getUserName(message.From)))
	case strings.Contains(strings.ToLower(cleanText), "ping"),
		strings.Contains(strings.ToLower(cleanText), "–ø–∏–Ω–≥"):
		b.sendMessage(message.Chat.ID, "pong")
	case strings.Contains(strings.ToLower(cleanText), "—Å–≤–æ–¥–∫–∞"),
		strings.Contains(strings.ToLower(cleanText), "—Å–∞–º–º–∞—Ä–∏"):
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é LIMIT_MSG)
		args := strings.Fields(message.CommandArguments())
		count := LIMIT_MSG // –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
		if len(args) > 0 {
			if num, err := strconv.Atoi(args[0]); err == nil && num > 0 {
				count = num
				// –û–≥—Ä–∞–Ω–∏—á–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
				if count > LIMIT_MSG {
					count = LIMIT_MSG
					b.sendMessage(message.Chat.ID, fmt.Sprintf("–Ø –ø–æ–º–Ω—é —Ç–æ–ª—å–∫–æ %d —Å–æ–æ–±—â–µ–Ω–∏–π...", LIMIT_MSG))
				}
			}
		}
		b.handleSummaryRequest(message, count)
	case strings.Contains(strings.ToLower(cleanText), "–ø–æ–º–æ—â—å"),
		strings.Contains(strings.ToLower(cleanText), "help"),
		strings.Contains(strings.ToLower(cleanText), "–∫–æ–º–∞–Ω–¥—ã"):
		b.sendMessage(message.Chat.ID, b.getHelp())
	default:
		//b.sendMessage(message.Chat.ID, "–Ø –≤–∞—Å –ø–æ–Ω—è–ª, –Ω–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—É—á–∏–ª –º–µ–Ω—è –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ '"+strings.ToLower(cleanText)+"'.\n\n"+b.getHelp())
		//TODO –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –≤ AI –∑–∞–ø—Ä–æ—Å–∞
		b.handleReplyToBot(message)
	}
}

// handleSummaryRequest –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–≤–æ–¥–∫—É —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
func (b *Bot) handleSummaryRequest(message *tgbotapi.Message, count int) {
	chatID := message.Chat.ID

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ —á–∞—Ç
	if !b.isChatAllowed(chatID) {
		b.sendMessage(chatID, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –º–µ–Ω—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∏—Å—Ç–æ—Ä–∏–∏ —ç—Ç–æ–≥–æ —á–∞—Ç–∞.")
		return
	}

	messages, err := b.getRecentMessages(-1002478281670, count) //–í—ã–±–æ—Ä–∫–∞ –∏–∑ –ë–î —Ç–æ–ª—å–∫–æ –ê—Ç–∏–ø–∏—á–Ω—ã–π –ß–∞—Ç
	if err != nil {
		fmt.Printf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: %v", err)
		return
	}

	if len(messages) == 0 {
		message := fmt.Sprintf("–ü–æ—Å–ª–µ–¥–Ω–∏–µ %v —á–∞—Å–æ–≤, —è –ø–æ—Ö–æ–∂–µ —Å–ø–∞–ª =)", CHECK_HOURS*-1)
		fmt.Println(message)
		b.sendMessage(chatID, message)
		return
	}

	// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
	var messagesText strings.Builder
	for _, msg := range messages {
		msgTime := time.Unix(msg.Timestamp, 0)
		// –°–æ–∑–¥–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å GMT+3
		gmt3 := time.FixedZone("GMT+3", 3*60*60)
		// –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤—Ä–µ–º—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å GMT+3
		msgTimeGMT3 := msgTime.In(gmt3)

		fmt.Fprintf(&messagesText, "[%s] %s(%v): %s\n",
			msgTimeGMT3.Format("15:04"),
			msg.UserFirstName,
			msg.Username,
			msg.Text)
	}

	//fmt.Println(messagesText.String())

	// –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ —Å –ø–æ–º–æ—â—å—é –ª–æ–∫–∞–ª—å–Ω–æ–π LLM
	summary, err := b.generateAiRequest(b.config.SystemPrompt, fmt.Sprintf(b.config.SummaryPrompt, messagesText.String()), message)

	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏: %v", err)
		b.sendMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–≤–æ–¥–∫–∏.")
		return
	}

	fmt.Printf("Resp AI: %v", summary)

	b.sendMessage(chatID, "üìù –°–≤–æ–¥–∫–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–π:\n\n"+summary)
	b.lastSummary[chatID] = time.Now()
}

// handleSummaryFromRequest –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–≤–æ–¥–∫—É –∏–∑ –¥—Ä—É–≥–æ–≥–æ —á–∞—Ç–∞
// func (b *Bot) handleSummaryFromRequest(message *tgbotapi.Message) {
// 	if message.ReplyToMessage == nil || message.ReplyToMessage.ForwardFromChat == nil {
// 		b.sendMessage(message.Chat.ID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–µ—Ä–µ—Å–ª–∞–≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å–≤–æ–¥–∫—É.")
// 		return
// 	}

// 	sourceChatID := message.ReplyToMessage.ForwardFromChat.ID
// 	history := b.chatHistories[sourceChatID]

// 	if len(history) == 0 {
// 		b.sendMessage(message.Chat.ID, fmt.Sprintf("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —á–∞—Ç–∞ %s.", message.ReplyToMessage.ForwardFromChat.Title))
// 		return
// 	}

// 	// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
// 	var messagesText strings.Builder
// 	for _, msg := range history {
// 		fmt.Fprintf(&messagesText, "[%s] %s: %s\n",
// 			msg.Time.Format("15:04"), msg.User, msg.Text)
// 	}

// 	summary, err := b.generateSummary(messagesText.String())
// 	if err != nil {
// 		log.Printf("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏: %v", err)
// 		b.sendMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–≤–æ–¥–∫–∏.")
// 		return
// 	}

// 	b.sendMessage(message.Chat.ID, fmt.Sprintf("üìù –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –∏–∑ %s:\n\n%s",
// 		message.ReplyToMessage.ForwardFromChat.Title, summary))
// }

// handleGetTopAIUsers –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Ç–æ–∫–µ–Ω–æ–≤ –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
func (b *Bot) handleGetTopAIUsers(message *tgbotapi.Message) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É)
	// if !b.isUserAdmin(message.Chat.ID, message.From.ID) {
	// 	b.sendMessage(message.Chat.ID, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
	// 	return
	// }

	// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
	topUsers, err := b.GetTopUsersByTokenUsage(10, 30)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %v", err)
		b.sendMessage(message.Chat.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
		return
	}

	if len(topUsers) == 0 {
		b.sendMessage(message.Chat.ID, "üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ AI –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π.")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —á–∞—Ç—É
	chatStats, err := b.GetChatTokenUsage(message.Chat.ID, 30)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–∞—Ç–∞: %v", err)
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	var reply strings.Builder
	reply.WriteString("üìä <b>–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é AI</b>\n")
	reply.WriteString("‚è± –ü–µ—Ä–∏–æ–¥: –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π\n\n")

	// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —á–∞—Ç—É
	if chatStats.TotalTokens > 0 {
		reply.WriteString("üí¨ <b>–û–±—â–µ–µ –ø–æ —á–∞—Ç—É:</b>\n")
		reply.WriteString(fmt.Sprintf("ü™ô –¢–æ–∫–µ–Ω—ã: %d (–∑–∞–ø—Ä–æ—Å—ã: %d, –æ—Ç–≤–µ—Ç—ã: %d)\n",
			chatStats.TotalTokens, chatStats.PromptTokens, chatStats.CompletionTokens))
		reply.WriteString(fmt.Sprintf("üíµ –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: $%.2f\n\n", chatStats.Cost))
	}

	reply.WriteString("üèÜ <b>–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n")

	for i, user := range topUsers {
		// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
		username, err := b.getUserByID(user.UserID)
		if err != nil || username == nil {
			continue
		}

		// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		reply.WriteString(fmt.Sprintf("%d. %s:\n", i+1, username))
		reply.WriteString(fmt.Sprintf("   ü™ô –¢–æ–∫–µ–Ω—ã: %d\n", user.TotalTokens))
		reply.WriteString(fmt.Sprintf("   üíµ –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: $%.2f\n\n", user.Cost))
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
	//reply.WriteString("\n‚ÑπÔ∏è –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /aitokens @username")

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	msg := tgbotapi.NewMessage(message.Chat.ID, reply.String())
	msg.ParseMode = "HTML"
	if _, err := b.tgBot.Send(msg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

// handleSummaryRequest –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–≤–æ–¥–∫—É —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
func (b *Bot) handleAnekdotRequest(message *tgbotapi.Message) {
	chatID := message.Chat.ID

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ —á–∞—Ç
	if !b.isChatAllowed(chatID) {
		b.sendMessage(chatID, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –º–µ–Ω—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∏—Å—Ç–æ—Ä–∏–∏ —ç—Ç–æ–≥–æ —á–∞—Ç–∞.")
		return
	}

	messages, err := b.getRecentMessages(-1002478281670, -1) //–í—ã–±–æ—Ä–∫–∞ –∏–∑ –ë–î —Ç–æ–ª—å–∫–æ –ê—Ç–∏–ø–∏—á–Ω—ã–π –ß–∞—Ç
	if err != nil {
		fmt.Printf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: %v", err)
		return
	}

	if len(messages) == 0 {
		fmt.Printf("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —á–∞—Å–æ–≤")
		return
	}

	// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
	var messagesText strings.Builder
	for _, msg := range messages {
		//msgTime := time.Unix(msg.Timestamp, 0)
		fmt.Fprintf(&messagesText, "%s: %s\n",
			//msgTime.Format("15:04"),
			msg.UserFirstName,
			msg.Text)
	}

	// –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ —Å –ø–æ–º–æ—â—å—é –ª–æ–∫–∞–ª—å–Ω–æ–π LLM
	//summary, err := b.generateAnekdot(messagesText.String(), chatID)
	summary, err := b.generateAiRequest(b.config.SystemPrompt, fmt.Sprintf(b.config.AnekdotPrompt, messagesText.String()), message)

	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–µ–∫–¥–æ—Ç–∞: %v", err)
		b.sendMessage(chatID, "–ù–µ —Å–º–æ–≥ –ø—Ä–∏–¥—É–º–∞—Ç—å –∞–Ω–µ–∫–¥–æ—Ç, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
		return
	}

	fmt.Printf("Resp AI: %v", summary)

	b.sendMessage(chatID, "üìù –ênekdot:\n\n"+summary)
	b.lastSummary[chatID] = time.Now()
}

// handleSummaryRequest –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–≤–æ–¥–∫—É —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
func (b *Bot) handleTopicRequest(message *tgbotapi.Message) {
	chatID := message.Chat.ID

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ —á–∞—Ç
	if !b.isChatAllowed(chatID) {
		b.sendMessage(chatID, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –º–µ–Ω—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∏—Å—Ç–æ—Ä–∏–∏ —ç—Ç–æ–≥–æ —á–∞—Ç–∞.")
		return
	}

	messages, err := b.getRecentMessages(-1002478281670, -1) //–í—ã–±–æ—Ä–∫–∞ –∏–∑ –ë–î —Ç–æ–ª—å–∫–æ –ê—Ç–∏–ø–∏—á–Ω—ã–π –ß–∞—Ç
	if err != nil {
		fmt.Printf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: %v", err)
		return
	}

	if len(messages) == 0 {
		fmt.Printf("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —á–∞—Å–æ–≤")
		return
	}

	// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
	var messagesText strings.Builder
	for _, msg := range messages {
		//msgTime := time.Unix(msg.Timestamp, 0)
		fmt.Fprintf(&messagesText, "%s: %s\n",
			//msgTime.Format("15:04"),
			msg.Username,
			msg.Text)
	}

	fmt.Println(messagesText.String())

	// –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ —Å –ø–æ–º–æ—â—å—é –ª–æ–∫–∞–ª—å–Ω–æ–π LLM
	//summary, err := b.generateTopic(messagesText.String(), chatID)
	summary, err := b.generateAiRequest(b.config.SystemPrompt, fmt.Sprintf(b.config.TopicPrompt, messagesText.String()), message)

	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–º—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π: %v", err)
		b.sendMessage(chatID, "–ù–µ —Å–º–æ–≥ –ø—Ä–∏–¥—É–º–∞—Ç—å —Ç–µ–º—É, —Å–æ—Ä—è–Ω.")
		return
	}

	fmt.Printf("Resp AI: %v", summary)

	b.sendMessage(chatID, "–û–±—Å—É–¥–∏–º?\n\n"+summary)
	b.lastSummary[chatID] = time.Now()
}

// handleStatsRequest –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º –∏ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—è–º –∏–∑ –ë–î
func (b *Bot) handleStatsRequest(message *tgbotapi.Message) {
	chatID := message.Chat.ID

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
	var statsMsg strings.Builder
	fmt.Fprintf(&statsMsg, "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞:\n\n")

	// 1. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º
	var totalMessages int
	err := b.db.QueryRow("SELECT COUNT(*) FROM messages WHERE chat_id = ?", chatID).Scan(&totalMessages)
	if err == nil {
		fmt.Fprintf(&statsMsg, "üì® –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: %d\n", totalMessages)
	}

	// 2. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—è–º
	var totalThanks int
	err = b.db.QueryRow("SELECT COUNT(*) FROM thanks WHERE chat_id = ?", chatID).Scan(&totalThanks)
	if err == nil {
		fmt.Fprintf(&statsMsg, "üôè –í—Å–µ–≥–æ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π: %d\n\n", totalThanks)
	}

	// 3. –¢–æ–ø –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π
	fmt.Fprintf(&statsMsg, "üèÜ –¢–æ–ø-5 —Å–∞–º—ã—Ö –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n")
	rows, err := b.db.Query(`
        SELECT u.username, COUNT(*) as thanks_count
        FROM thanks t
        JOIN users u ON t.from_user_id = u.id
        WHERE t.chat_id = ?
        GROUP BY t.from_user_id
        ORDER BY thanks_count DESC
        LIMIT 5
    `, chatID)
	if err == nil {
		defer rows.Close()
		rank := 1
		for rows.Next() {
			var username string
			var count int
			if err := rows.Scan(&username, &count); err != nil {
				continue
			}
			if username == "" {
				username = "–ë–µ–∑ username"
			}
			fmt.Fprintf(&statsMsg, "%d. %s - %d —Ä–∞–∑\n", rank, username, count)
			rank++
		}
	}

	// 4. –¢–æ–ø –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π
	fmt.Fprintf(&statsMsg, "\nüíñ –¢–æ–ø-5 —Å–∞–º—ã—Ö —Ü–µ–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n")
	rows, err = b.db.Query(`
        SELECT u.username, COUNT(*) as thanks_received
        FROM thanks t
        JOIN users u ON t.to_user_id = u.id
        WHERE t.chat_id = ? AND t.to_user_id != 0
        GROUP BY t.to_user_id
        ORDER BY thanks_received DESC
        LIMIT 5
    `, chatID)
	if err == nil {
		defer rows.Close()
		rank := 1
		for rows.Next() {
			var username string
			var count int
			if err := rows.Scan(&username, &count); err != nil {
				continue
			}
			if username == "" {
				username = "–ë–µ–∑ username"
			}
			fmt.Fprintf(&statsMsg, "%d. %s - %d –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π\n", rank, username, count)
			rank++
		}
	}

	// 5. –ü–æ—Å–ª–µ–¥–Ω–∏–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏
	fmt.Fprintf(&statsMsg, "\nüÜï –ü–æ—Å–ª–µ–¥–Ω–∏–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏:\n")
	rows, err = b.db.Query(`
        SELECT u1.username, u2.username, t.text
        FROM thanks t
        LEFT JOIN users u1 ON t.from_user_id = u1.id
        LEFT JOIN users u2 ON t.to_user_id = u2.id
        WHERE t.chat_id = ?
        ORDER BY t.timestamp DESC
        LIMIT 3
    `, chatID)
	if err == nil {
		defer rows.Close()
		for rows.Next() {
			var fromUser, toUser, text string
			if err := rows.Scan(&fromUser, &toUser, &text); err != nil {
				continue
			}
			if fromUser == "" {
				fromUser = "–ê–Ω–æ–Ω–∏–º"
			}
			if toUser == "" {
				toUser = "–≤—Å–µ—Ö"
			}
			fmt.Fprintf(&statsMsg, "üëâ %s ‚Üí %s: %s\n", fromUser, toUser, truncateText(text, 20))
		}
	}

	// 6. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏
	dayAgo := time.Now().Add(-24 * time.Hour).Unix()
	var lastDayThanks int
	err = b.db.QueryRow(`
        SELECT COUNT(*) 
        FROM thanks 
        WHERE chat_id = ? AND timestamp >= ?
    `, chatID, dayAgo).Scan(&lastDayThanks)
	if err == nil {
		fmt.Fprintf(&statsMsg, "\nüïí –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π –∑–∞ —Å—É—Ç–∫–∏: %d", lastDayThanks)
	}

	b.sendMessage(chatID, statsMsg.String())
}

// storeMessage —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
func (b *Bot) storeMessage(message *tgbotapi.Message) {
	// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	if message.Text == "" {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–ø–∏—Å–∏ (–¥–ª—è –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–π)
		if message.Caption == "" {
			return
		}
	}

	chatID := message.Chat.ID
	userID := message.From.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –±–æ—Ç —á–∏—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —ç—Ç–æ–º —á–∞—Ç–µ
	if !b.canBotReadMessages(chatID) {
		log.Printf("–ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç —á–∏—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ %d", chatID)
		return
	}

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç –∏–ª–∏ –ø–æ–¥–ø–∏—Å—å (–¥–ª—è –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–π)
	text := message.Text
	if text == "" && message.Caption != "" {
		text = message.Caption
	}

	// // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–æ–±—â–µ–Ω–∏—è
	// msg := ChatMessage{
	// 	User: userName,
	// 	Text: text,
	// 	Time: time.Now(),
	// }

	// // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
	// if _, exists := b.chatHistories[chatID]; !exists {
	// 	b.chatHistories[chatID] = []ChatMessage{}
	// }

	// // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
	// b.chatHistories[chatID] = append(b.chatHistories[chatID], msg)
	// //log.Printf("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ %d: [%v]%s: %s", chatID, userID, msg.User, msg.Text)

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Ç –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
	err := b.saveChat(message.Chat)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Ç–∞: %v", err)
	}

	if message.From != nil {
		err = b.saveUser(message.From)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
		}
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
	err = b.saveMessage(
		message.Chat.ID,
		userID,
		text,
		int64(message.Date),
	)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ "—Å–ø–∞—Å–∏–±–æ" –∏–ª–∏ "—Å–ø—Å"
	b.checkForThanks(message)
}

// sendMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
func (b *Bot) sendMessage(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	_, err := b.tgBot.Send(msg)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

// isChatAllowed –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ —á–∞—Ç
func (b *Bot) isChatAllowed(chatID int64) bool {
	if len(b.config.AllowedGroups) == 0 {
		return true
	}

	for _, id := range b.config.AllowedGroups {
		if id == chatID {
			return true
		}
	}
	return false
}

// handleReplyToBot –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
func (b *Bot) handleReplyToBot(message *tgbotapi.Message) {
	log.Printf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –æ–±—Ä–∞—Ç–∏–ª—Å—è: %s", message.From.ID, message.Text)

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	err := b.saveContext(
		message.Chat.ID,
		message.From.ID,
		"user",
		message.Text,
		message.Time().Unix(),
	)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: %v", err)
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞)
	context, err := b.getConversationContext(
		message.Chat.ID,
		message.From.ID,
		b.config.ContextMessageLimit, // –Ω–∞–ø—Ä–∏–º–µ—Ä 30
		b.config.ContextTimeLimit,    // –Ω–∞–ø—Ä–∏–º–µ—Ä 24
	)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: %v", err)
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
	var prompt string
	if len(context) > 0 {
		prompt = "–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ–±—â–µ–Ω–∏—è:\n"
		for _, msg := range context {
			prompt += fmt.Sprintf("%s: %s\n", msg.Role, msg.Content)
		}
		prompt += "\n–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: " + message.Text
	} else {
		prompt = message.Text
	}

	log.Printf("prompt: %v", prompt)

	// –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ —Å –ø–æ–º–æ—â—å—é –ª–æ–∫–∞–ª—å–Ω–æ–π LLM
	summary, err := b.generateAiRequest(
		b.config.ReplyPrompt,
		//b.config.SystemPrompt,
		//fmt.Sprintf(b.config.ReplyPrompt, prompt),
		prompt,
		message,
	)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ reply: %v", err)
		b.sendMessage(message.Chat.ID, "–ß—Ç–æ-—Ç–æ –º–æ–∏ –º–æ–∑–≥–∏ –ø–æ—Ç–µ–∫–ª–∏.")
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
	err = b.saveContext(
		message.Chat.ID,
		message.From.ID,
		"assistant",
		summary,
		time.Now().Unix(),
	)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞: %v", err)
	}

	fmt.Printf("Resp AI: %v", summary)
	b.sendMessage(message.Chat.ID, summary+" @"+message.From.UserName)
}

// ContextMessage –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–∏–∞–ª–æ–≥–∞
type ContextMessage struct {
	Role      string // "user" –∏–ª–∏ "assistant"
	Content   string
	Timestamp int64
}
