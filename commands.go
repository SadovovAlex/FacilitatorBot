package main

import (
	"fmt"
	"strconv"
	"strings"
	"time"

	"github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// CommandHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
func (b *Bot) handleCommand(message *tgbotapi.Message) {
	if !b.isChatAllowed(message.Chat.ID) {
		b.sendMessage(message.Chat.ID, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Ä–∞–±–æ—Ç–∞—é –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
		return
	}

	if !b.canBotReadMessages(message.Chat.ID) {
		b.sendMessage(message.Chat.ID, "–ú–Ω–µ –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.")
		return
	}

	switch message.Command() {
	case "start":
		b.handleStart(message)
	case "help":
		b.handleHelp(message)
	case "ping", "–ø–∏–Ω–≥":
		b.handlePing(message)
	case "summary", "—Å–∞–º–º–∞—Ä–∏":
		b.handleSummary(message)
	case "stat", "stats":
		b.handleStats(message)
	case "aistat", "aistats":
		b.handleAIStats(message)
	case "anekdot", "–∞–Ω–µ–∫–¥–æ—Ç":
		b.handleAnekdot(message)
	case "tema", "topic":
		b.handleTopic(message)
	case "clear", "–∑–∞–±—É–¥—å":
		b.handleClear(message)
	default:
		b.handleUnknownCommand(message)
	}
}

// handleStart –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
func (b *Bot) handleStart(message *tgbotapi.Message) {
	b.sendMessage(message.Chat.ID, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∞—Ç–∫–∏—Ö –ø–µ—Ä–µ—Å–∫–∞–∑–æ–≤ –æ–±—Å—É–∂–¥–µ–Ω–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π /summary –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏.")
}

// handleHelp –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help
func (b *Bot) handleHelp(message *tgbotapi.Message) {
	b.sendMessage(message.Chat.ID, b.getHelp())
}

// handlePing –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /ping
func (b *Bot) handlePing(message *tgbotapi.Message) {
	commandReceiveTime := time.Now()
	b.sendMessage(message.Chat.ID, "pong")

	processingTime := time.Since(commandReceiveTime)
	messageTime := time.Unix(int64(message.Date), 0)
	timeDiff := time.Since(messageTime)

	response := fmt.Sprintf(
		"üèì Pong!\n"+
		"‚è± –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: %d ms\n"+
		"üïí –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: %s\n"+
		"‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: %s",
		processingTime.Milliseconds(),
		time.Now().Format("02.01.2006 15:04:05 MST"),
		formatDuration(timeDiff),
	)

	b.sendMessage(message.Chat.ID, response)
}

// handleSummary –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /summary
func (b *Bot) handleSummary(message *tgbotapi.Message) {
	args := strings.Fields(message.CommandArguments())
	count := LIMIT_MSG

	if len(args) > 0 {
		if num, err := strconv.Atoi(args[0]); err == nil && num > 0 {
			count = num
			if count > LIMIT_MSG {
				count = LIMIT_MSG
				b.sendMessage(message.Chat.ID, fmt.Sprintf("–Ø –ø–æ–º–Ω—é —Ç–æ–ª—å–∫–æ %d —Å–æ–æ–±—â–µ–Ω–∏–π...", LIMIT_MSG))
			}
		}
	}

	b.handleSummaryRequest(message, count)
}

// handleStats –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /stats
func (b *Bot) handleStats(message *tgbotapi.Message) {
	b.handleStatsRequest(message)
}

// handleAIStats –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /aistats (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
func (b *Bot) handleAIStats(message *tgbotapi.Message) {
	if allowedAdmins[message.From.ID] {
		b.handleGetTopAIUsers(message)
	}
}

// handleAnekdot –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /anekdot
func (b *Bot) handleAnekdot(message *tgbotapi.Message) {
	b.handleAnekdotRequest(message)
}

// handleTopic –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /tema
func (b *Bot) handleTopic(message *tgbotapi.Message) {
	b.handleTopicRequest(message)
}

// handleClear –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /clear
func (b *Bot) handleClear(message *tgbotapi.Message) {
	b.DeleteUserContext(message.Chat.ID, message.From.ID)
}

// handleUnknownCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
func (b *Bot) handleUnknownCommand(message *tgbotapi.Message) {
	b.sendMessage(message.Chat.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")
}
