package main

import (
	"fmt"
	"log"
	"math/rand"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ (–∏–ª–∏ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –±–æ—Ç–∞) –¥–æ–±–∞–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
var summaryTitles = []string{
	"üìù **–°–≤–æ–¥–∫–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–π**",
	"üîçüìå *–ò—Ç–æ–≥–∏ –¥–∏—Å–∫—É—Å—Å–∏–∏*\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ",
	"‚ùì *–ß—Ç–æ –æ–±—Å—É–∂–¥–∞–ª–∏?*",
	"üì∞ *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è*",
	"üìå *–ö—Ä–∞—Ç–∫–æ:*",
	"üí° *–ú—ã—Å–ª–∏ –∏ –∏–¥–µ–∏*",
	"ü§î *–†–µ—Ñ–ª–µ–∫—Å–∏—è –¥–∏—Å–∫—É—Å—Å–∏–∏*",
	"üé§ *–ß—Ç–æ —Ç—É—Ç –Ω–∞–≥–æ–≤–æ—Ä–∏–ª–∏?*",
	"‚öôÔ∏è *–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏—Ç–æ–≥–∏*",
	fmt.Sprintf("‚è± *–û–±—Å—É–∂–¥–µ–Ω–∏–µ –Ω–∞ %s*", time.Now().Format("15:04")),
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
func getRandomSummaryTitle() string {
	rand.Seed(time.Now().UnixNano())
	return summaryTitles[rand.Intn(len(summaryTitles))]
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
func calculateCost(model string, tokens int) float64 {
	// –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
	// –ù–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è GPT-4:
	if strings.Contains(model, "gpt-4") {
		return float64(tokens) * 0.00006 // –ø—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
	}
	return float64(tokens) * 0.000002 // –¥–ª—è –¥—Ä—É–≥–∏—Ö –º–æ–¥–µ–ª–µ–π
}

func (b *Bot) canBotReadMessages(chatID int64) bool {
	member, err := b.tgBot.GetChatMember(tgbotapi.GetChatMemberConfig{
		ChatConfigWithUser: tgbotapi.ChatConfigWithUser{
			ChatID: chatID,
			UserID: b.tgBot.Self.ID,
		},
	})

	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤: %v", err)
		return false
	}

	// –ë–æ—Ç –º–æ–∂–µ—Ç —á–∏—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å–ª–∏ –æ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–ª–∏ –æ–±—ã—á–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫
	return member.Status == "administrator" || member.Status == "member"
}

// isBotMentioned –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ –±–æ—Ç—É
func (b *Bot) isBotMentioned(message *tgbotapi.Message) bool {
	// –ü—Ä–∏–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
	lowerText := strings.ToLower(message.Text)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞—â–µ–Ω–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
	keywords := []string{"sheriff", "—à–µ—Ä–∏—Ñ", "—à–µ—Ä–∏—Ñ—Ñ"}
	for _, kw := range keywords {
		if strings.HasPrefix(lowerText, kw) {
			return true
		}
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @username
	if message.Entities != nil {
		for _, entity := range message.Entities {
			if entity.Type == "mention" {
				mention := message.Text[entity.Offset : entity.Offset+entity.Length]
				if strings.EqualFold(mention, "@"+b.tgBot.Self.UserName) {
					return true
				}
			}
		}
	}

	return false
}

// getHelp –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–ø—Ä–∞–≤–∫–∏ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
func (b *Bot) getHelp() string {
	return `–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/summary [N] - –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π (N - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100)
/anekdot - –ø—Ä–∏–¥—É–º–∞—Ç—å –∞–Ω–µ–∫–¥–æ—Ç –ø–æ —Ç–µ–º–∞–º –æ–±—Å—É–∂–¥–µ–Ω–∏—è
/tema - –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—Å—É–∂–¥–µ–Ω–∏–µ —Ç–µ–º—ã
/stats - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π
/aistats - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AI (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
/clear –∏–ª–∏ /–∑–∞–±—É–¥—å - –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—â–µ–Ω–∏—è
/ping –∏–ª–∏ /–ø–∏–Ω–≥ - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –±–æ—Ç–∞

–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫–æ –º–Ω–µ –Ω–∞–ø—Ä—è–º—É—é:
- –ù–∞—á–∏–Ω–∞—è —Å–æ–æ–±—â–µ–Ω–∏–µ —Å "Sheriff", "–®–µ—Ä–∏—Ñ" –∏–ª–∏ "–®–µ—Ä–∏—Ñ—Ñ"
- –ò–ª–∏ —É–ø–æ–º—è–Ω—É–≤ –º–µ–Ω—è —á–µ—Ä–µ–∑ @username (@` + b.tgBot.Self.UserName + `)

–ü—Ä–∏–º–µ—Ä—ã:
- /summary 50 - –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 50 —Å–æ–æ–±—â–µ–Ω–∏–π
- /anekdot - –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–µ–∫–¥–æ—Ç
- /stats - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Ç–∞`
}

// removeBotMention —É–¥–∞–ª—è–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
func (b *Bot) removeBotMention(text string) string {
	lowerText := strings.ToLower(text)

	// –£–¥–∞–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
	keywords := []string{"sheriff:", "—à–µ—Ä–∏—Ñ:", "—à–µ—Ä–∏—Ñ—Ñ:"}
	for _, kw := range keywords {
		if strings.HasPrefix(lowerText, kw) {
			return strings.TrimSpace(text[len(kw):])
		}
	}

	// –£–¥–∞–ª—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ @username
	if strings.Contains(lowerText, "@"+strings.ToLower(b.tgBot.Self.UserName)) {
		return strings.ReplaceAll(text, "@"+b.tgBot.Self.UserName, "")
	}

	return text
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–µ–∑–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
func (b *Bot) truncateText(text string, maxLength int) string {
	if len(text) > maxLength {
		return text[:maxLength] + "..."
	}
	return text
}

// checkForThanks –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–ª–æ–≤ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ë–î// checkForThanks –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–ª–æ–≤ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏
func (b *Bot) checkForThanks(message *tgbotapi.Message) {
	text := message.Text
	if text == "" && message.Caption != "" {
		text = message.Caption
	}

	lowerText := strings.ToLower(text)
	containsThanks := strings.Contains(lowerText, "—Å–ø–∞—Å–∏–±–æ") ||
		strings.Contains(lowerText, "—Å–ø—Å ") ||
		strings.Contains(lowerText, "–±–ª–∞–≥–æ–¥–∞—Ä—é")

	if !containsThanks {
		return
	} else {
		fmt.Printf("—Å–ø—Å found")
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–æ–º—É –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–æ —Å–ø–∞—Å–∏–±–æ
	var thankedUserID int64 = 0

	// –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
	if message.ReplyToMessage != nil {
		thankedUserID = message.ReplyToMessage.From.ID
	} else {
		// –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ @username –≤ —Ç–µ–∫—Å—Ç–µ
		if message.Entities != nil {
			for _, entity := range message.Entities {
				if entity.Type == "mention" {
					username := text[entity.Offset : entity.Offset+entity.Length]
					// –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å userID –ø–æ username –∏–∑ –ë–î
					user, err := b.getUserByUsername(username[1:]) // –£–±–∏—Ä–∞–µ–º @
					if err == nil && user != nil {
						thankedUserID = user.ID
					}
				}
			}
		}
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å
	err := b.saveThanks(
		message.Chat.ID,
		message.From.ID,
		thankedUserID,
		text,
		int64(message.Date),
		message.MessageID,
	)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏: %v", err)
	}
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —á–∞—Ç–∞
func getChatTitle(message *tgbotapi.Message) string {
	if message.Chat == nil {
		return "Unknown"
	}

	switch message.Chat.Type {
	case "group", "supergroup":
		if message.Chat.Title != "" {
			return message.Chat.Title
		}
		return "Group Chat"
	case "private":
		return getUserName(message.From)
	case "channel":
		if message.Chat.Title != "" {
			return message.Chat.Title
		}
		return "Channel"
	default:
		return "Unknown"
	}
}

// =======  tg –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func getUserName(user *tgbotapi.User) string {
	if user == nil {
		return "Unknown"
	}
	if user.UserName != "" {
		return "@" + user.UserName
	}
	return strings.TrimSpace(fmt.Sprintf("%s %s", user.FirstName, user.LastName))
}

// getUserByID –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID –∏–∑ –ë–î
func (b *Bot) getUserByID(userID int64) (*tgbotapi.User, error) {
	var user tgbotapi.User
	err := b.db.QueryRow(`
        SELECT id, username, first_name, last_name
        FROM users
        WHERE id = ?`, userID).Scan(
		&user.ID, &user.UserName, &user.FirstName, &user.LastName)

	if err != nil {
		return nil, err
	}
	return &user, nil
}

// formatDuration —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç duration –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
func formatDuration(d time.Duration) string {
	d = d.Round(time.Second)

	if d < time.Second {
		return fmt.Sprintf("%d ms", d.Milliseconds())
	}

	if d < time.Minute {
		return fmt.Sprintf("%.1f —Å–µ–∫", d.Seconds())
	}

	return fmt.Sprintf("%d –º–∏–Ω %d —Å–µ–∫", int(d.Minutes()), int(d.Seconds())%60)
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
func getMessageType(msg *tgbotapi.Message) string {
	switch {
	case msg.Text != "":
		return "—Ç–µ–∫—Å—Ç"
	case msg.Photo != nil:
		return "—Ñ–æ—Ç–æ"
	case msg.Video != nil:
		return "–≤–∏–¥–µ–æ"
	case msg.Document != nil:
		return "–¥–æ–∫—É–º–µ–Ω—Ç"
	case msg.Audio != nil:
		return "–∞—É–¥–∏–æ"
	case msg.Voice != nil:
		return "–≥–æ–ª–æ—Å–æ–≤–æ–µ"
	case msg.Sticker != nil:
		return "—Å—Ç–∏–∫–µ—Ä"
	case msg.Location != nil:
		return "–ª–æ–∫–∞—Ü–∏—è"
	case msg.Contact != nil:
		return "–∫–æ–Ω—Ç–∞–∫—Ç"
	case msg.Animation != nil:
		return "–≥–∏—Ñ–∫–∞"
	default:
		return "—Å–æ–æ–±—â–µ–Ω–∏–µ"
	}
}

// startChatTyping –∑–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏ –≤ —á–∞—Ç–µ
func (b *Bot) startChatTyping(chatID int64) {
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏ —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
	chatAction := tgbotapi.NewChatAction(chatID, tgbotapi.ChatTyping)
	if _, err := b.tgBot.Request(chatAction); err != nil {
		log.Printf("[startChatTyping] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–µ—á–∞—Ç–∏: %v", err)
		return
	}

	stopTyping := make(chan struct{})
	go func() {
		ticker := time.NewTicker(5 * time.Second)
		defer ticker.Stop()
		for {
			select {
			case <-ticker.C:
				chatAction := tgbotapi.NewChatAction(chatID, tgbotapi.ChatTyping)
				if _, err := b.tgBot.Request(chatAction); err != nil {
					log.Printf("[startChatTyping] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–µ—á–∞—Ç–∏: %v", err)
				}
			case <-stopTyping:
				return
			}
		}
	}()
	defer close(stopTyping)
}
